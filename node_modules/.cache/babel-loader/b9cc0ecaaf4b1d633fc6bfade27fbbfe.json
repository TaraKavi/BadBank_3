{"ast":null,"code":"var _jsxFileName = \"/Users/mint/Sites/BadBankS/src/pages/createaccount.js\",\n  _s = $RefreshSig$();\nimport { useContext, useState } from \"react\";\nimport { UsersContext } from \"../state/AppState\";\nimport { useToastContext } from \"../state/CustomToast\";\nimport BankForm from \"../components/bankform\";\nimport { BankCard } from \"../components/bankcard\";\nimport * as yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CreateAccount() {\n  _s();\n  const {\n    actions\n  } = useContext(UsersContext);\n  const [show, setShow] = useState(true);\n  const addToast = useToastContext();\n  const handleCreate = data => {\n    const {\n      result,\n      errorMessage\n    } = actions.addUser({\n      name: data.Name,\n      email: data.Email,\n      password: data.Password,\n      balance: 0\n    });\n    if (result) {\n      setShow(false);\n      addToast({\n        text: \"Account successfully created\",\n        type: \"success\"\n      });\n    } else {\n      addToast({\n        text: errorMessage,\n        type: \"error\"\n      });\n    }\n    return {\n      result,\n      errorMessage\n    };\n  };\n  let formFields = [{\n    id: \"Name\",\n    placeholder: \"Enter name\",\n    type: \"input\"\n  }, {\n    id: \"Email\",\n    placeholder: \"Enter email\",\n    type: \"email\"\n  }, {\n    id: \"Password\",\n    placeholder: \"Enter password\",\n    type: \"password\"\n  }];\n  let initialValues = {\n    Name: \"\",\n    Password: \"\",\n    Email: \"\"\n  };\n  const schema = yup.object().shape({\n    Name: yup.string().required(),\n    Email: yup.string().email(\"User must be a valid email\").required(),\n    Password: yup.string().min(8, \"Password must have at least 8 chars\").required()\n  });\n  const clearForm = () => {\n    setShow(true);\n  };\n  const renderCreateAccountForm = () => {\n    return /*#__PURE__*/_jsxDEV(BankForm, {\n      buttonSubmit: \"Create Account\",\n      handle: handleCreate,\n      fields: formFields,\n      initialData: initialValues,\n      schema: schema\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  };\n  const renderNewAccount = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-account\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Success\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: \"User account created successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          onClick: () => clearForm(),\n          children: \"Add another account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container create-account\",\n    children: /*#__PURE__*/_jsxDEV(BankCard, {\n      txtcolor: \"black\",\n      header: \"Create account\",\n      body: show ? renderCreateAccountForm() : renderNewAccount()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateAccount, \"oSaAtGlD+J/D8/u7cCnRpynADEg=\", false, function () {\n  return [useToastContext];\n});\n_c = CreateAccount;\nvar _c;\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"names":["useContext","useState","UsersContext","useToastContext","BankForm","BankCard","yup","CreateAccount","actions","show","setShow","addToast","handleCreate","data","result","errorMessage","addUser","name","Name","email","Email","password","Password","balance","text","type","formFields","id","placeholder","initialValues","schema","object","shape","string","required","min","clearForm","renderCreateAccountForm","renderNewAccount"],"sources":["/Users/mint/Sites/BadBankS/src/pages/createaccount.js"],"sourcesContent":["import { useContext, useState } from \"react\";\nimport { UsersContext } from \"../state/AppState\";\nimport { useToastContext } from \"../state/CustomToast\";\nimport BankForm from \"../components/bankform\";\nimport { BankCard } from \"../components/bankcard\";\n\nimport * as yup from \"yup\";\n\nexport function CreateAccount() {\n  const { actions } = useContext(UsersContext);\n  const [show, setShow] = useState(true);\n  const addToast = useToastContext();\n\n  const handleCreate = (data) => {\n    const { result, errorMessage } = actions.addUser({\n      name: data.Name,\n      email: data.Email,\n      password: data.Password,\n      balance: 0,\n    });\n\n    if (result) {\n      setShow(false);\n      addToast({ text: \"Account successfully created\", type: \"success\" });\n    } else {\n      addToast({ text: errorMessage, type: \"error\" });\n    }\n\n    return { result, errorMessage };\n  };\n\n  let formFields = [\n    { id: \"Name\", placeholder: \"Enter name\", type: \"input\" },\n    { id: \"Email\", placeholder: \"Enter email\", type: \"email\" },\n    { id: \"Password\", placeholder: \"Enter password\", type: \"password\" },\n  ];\n\n  let initialValues = {\n    Name: \"\",\n    Password: \"\",\n    Email: \"\",\n  };\n\n  const schema = yup.object().shape({\n    Name: yup.string().required(),\n    Email: yup.string().email(\"User must be a valid email\").required(),\n    Password: yup\n      .string()\n      .min(8, \"Password must have at least 8 chars\")\n      .required(),\n  });\n\n  const clearForm = () => {\n    setShow(true);\n  };\n\n  const renderCreateAccountForm = () => {\n    return (\n      <BankForm\n        buttonSubmit=\"Create Account\"\n        handle={handleCreate}\n        fields={formFields}\n        initialData={initialValues}\n        schema={schema}\n      />\n    );\n  };\n\n  const renderNewAccount = () => {\n    return (\n      <div className=\"create-account\">\n        <h5>Success</h5>\n        <div className=\"mb-3\">User account created successfully</div>\n        <div className=\"text-center\">\n          <button type=\"submit\" className=\"btn btn-primary\" onClick={() => clearForm()} >\n            Add another account\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"card-container create-account\">\n      <BankCard\n        txtcolor=\"black\"\n        header=\"Create account\"\n        body={show ? renderCreateAccountForm() : renderNewAccount()}\n      />\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}